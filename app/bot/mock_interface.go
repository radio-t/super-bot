// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bot

import (
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//	func TestSomethingThatUsesInterface(t *testing.T) {
//
//		// make and configure a mocked Interface
//		mockedInterface := &InterfaceMock{
//			HelpFunc: func() string {
//				panic("mock out the Help method")
//			},
//			OnMessageFunc: func(msg Message) Response {
//				panic("mock out the OnMessage method")
//			},
//			ReactOnFunc: func() []string {
//				panic("mock out the ReactOn method")
//			},
//		}
//
//		// use mockedInterface in code that requires Interface
//		// and then make assertions.
//
//	}
type InterfaceMock struct {
	// HelpFunc mocks the Help method.
	HelpFunc func() string

	// OnMessageFunc mocks the OnMessage method.
	OnMessageFunc func(msg Message) Response

	// ReactOnFunc mocks the ReactOn method.
	ReactOnFunc func() []string

	// calls tracks calls to the methods.
	calls struct {
		// Help holds details about calls to the Help method.
		Help []struct {
		}
		// OnMessage holds details about calls to the OnMessage method.
		OnMessage []struct {
			// Msg is the msg argument value.
			Msg Message
		}
		// ReactOn holds details about calls to the ReactOn method.
		ReactOn []struct {
		}
	}
	lockHelp      sync.RWMutex
	lockOnMessage sync.RWMutex
	lockReactOn   sync.RWMutex
}

// Help calls HelpFunc.
func (mock *InterfaceMock) Help() string {
	if mock.HelpFunc == nil {
		panic("InterfaceMock.HelpFunc: method is nil but Interface.Help was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHelp.Lock()
	mock.calls.Help = append(mock.calls.Help, callInfo)
	mock.lockHelp.Unlock()
	return mock.HelpFunc()
}

// HelpCalls gets all the calls that were made to Help.
// Check the length with:
//
//	len(mockedInterface.HelpCalls())
func (mock *InterfaceMock) HelpCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHelp.RLock()
	calls = mock.calls.Help
	mock.lockHelp.RUnlock()
	return calls
}

// OnMessage calls OnMessageFunc.
func (mock *InterfaceMock) OnMessage(msg Message) Response {
	if mock.OnMessageFunc == nil {
		panic("InterfaceMock.OnMessageFunc: method is nil but Interface.OnMessage was just called")
	}
	callInfo := struct {
		Msg Message
	}{
		Msg: msg,
	}
	mock.lockOnMessage.Lock()
	mock.calls.OnMessage = append(mock.calls.OnMessage, callInfo)
	mock.lockOnMessage.Unlock()
	return mock.OnMessageFunc(msg)
}

// OnMessageCalls gets all the calls that were made to OnMessage.
// Check the length with:
//
//	len(mockedInterface.OnMessageCalls())
func (mock *InterfaceMock) OnMessageCalls() []struct {
	Msg Message
} {
	var calls []struct {
		Msg Message
	}
	mock.lockOnMessage.RLock()
	calls = mock.calls.OnMessage
	mock.lockOnMessage.RUnlock()
	return calls
}

// ReactOn calls ReactOnFunc.
func (mock *InterfaceMock) ReactOn() []string {
	if mock.ReactOnFunc == nil {
		panic("InterfaceMock.ReactOnFunc: method is nil but Interface.ReactOn was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReactOn.Lock()
	mock.calls.ReactOn = append(mock.calls.ReactOn, callInfo)
	mock.lockReactOn.Unlock()
	return mock.ReactOnFunc()
}

// ReactOnCalls gets all the calls that were made to ReactOn.
// Check the length with:
//
//	len(mockedInterface.ReactOnCalls())
func (mock *InterfaceMock) ReactOnCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReactOn.RLock()
	calls = mock.calls.ReactOn
	mock.lockReactOn.RUnlock()
	return calls
}

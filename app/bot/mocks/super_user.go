// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// SuperUser is a mock implementation of bot.SuperUser.
//
//	func TestSomethingThatUsesSuperUser(t *testing.T) {
//
//		// make and configure a mocked bot.SuperUser
//		mockedSuperUser := &SuperUser{
//			IsSuperFunc: func(userName string) bool {
//				panic("mock out the IsSuper method")
//			},
//		}
//
//		// use mockedSuperUser in code that requires bot.SuperUser
//		// and then make assertions.
//
//	}
type SuperUser struct {
	// IsSuperFunc mocks the IsSuper method.
	IsSuperFunc func(userName string) bool

	// calls tracks calls to the methods.
	calls struct {
		// IsSuper holds details about calls to the IsSuper method.
		IsSuper []struct {
			// UserName is the userName argument value.
			UserName string
		}
	}
	lockIsSuper sync.RWMutex
}

// IsSuper calls IsSuperFunc.
func (mock *SuperUser) IsSuper(userName string) bool {
	if mock.IsSuperFunc == nil {
		panic("SuperUser.IsSuperFunc: method is nil but SuperUser.IsSuper was just called")
	}
	callInfo := struct {
		UserName string
	}{
		UserName: userName,
	}
	mock.lockIsSuper.Lock()
	mock.calls.IsSuper = append(mock.calls.IsSuper, callInfo)
	mock.lockIsSuper.Unlock()
	return mock.IsSuperFunc(userName)
}

// IsSuperCalls gets all the calls that were made to IsSuper.
// Check the length with:
//
//	len(mockedSuperUser.IsSuperCalls())
func (mock *SuperUser) IsSuperCalls() []struct {
	UserName string
} {
	var calls []struct {
		UserName string
	}
	mock.lockIsSuper.RLock()
	calls = mock.calls.IsSuper
	mock.lockIsSuper.RUnlock()
	return calls
}

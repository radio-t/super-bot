// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// OpenAISummary is a mock implementation of openai.openAISummary.
//
//	func TestSomethingThatUsesopenAISummary(t *testing.T) {
//
//		// make and configure a mocked openai.openAISummary
//		mockedopenAISummary := &OpenAISummary{
//			SummaryFunc: func(text string) (string, error) {
//				panic("mock out the Summary method")
//			},
//		}
//
//		// use mockedopenAISummary in code that requires openai.openAISummary
//		// and then make assertions.
//
//	}
type OpenAISummary struct {
	// SummaryFunc mocks the Summary method.
	SummaryFunc func(text string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Summary holds details about calls to the Summary method.
		Summary []struct {
			// Text is the text argument value.
			Text string
		}
	}
	lockSummary sync.RWMutex
}

// Summary calls SummaryFunc.
func (mock *OpenAISummary) Summary(text string) (string, error) {
	if mock.SummaryFunc == nil {
		panic("OpenAISummary.SummaryFunc: method is nil but openAISummary.Summary was just called")
	}
	callInfo := struct {
		Text string
	}{
		Text: text,
	}
	mock.lockSummary.Lock()
	mock.calls.Summary = append(mock.calls.Summary, callInfo)
	mock.lockSummary.Unlock()
	return mock.SummaryFunc(text)
}

// SummaryCalls gets all the calls that were made to Summary.
// Check the length with:
//
//	len(mockedopenAISummary.SummaryCalls())
func (mock *OpenAISummary) SummaryCalls() []struct {
	Text string
} {
	var calls []struct {
		Text string
	}
	mock.lockSummary.RLock()
	calls = mock.calls.Summary
	mock.lockSummary.RUnlock()
	return calls
}

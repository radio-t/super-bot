package bot

import (
	"bytes"
	"io"
	"net/http"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/radio-t/super-bot/app/bot/mocks"
)

func TestFilter_OnMessage(t *testing.T) {
	superUser := &mocks.SuperUser{IsSuperFunc: func(userName string) bool {
		if userName == "super" || userName == "admin" {
			return true
		}
		return false
	}}
	mockedHTTPClient := &mocks.HTTPClient{
		DoFunc: func(req *http.Request) (*http.Response, error) {
			if strings.Contains(req.URL.String(), "101") {
				return &http.Response{
					StatusCode: 200,
					Body:       io.NopCloser(bytes.NewBufferString(`{"ok": true, "description": "Is a spammer"}`)),
				}, nil
			}
			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewBufferString(`{"ok": false, "description": "Not a spammer"}`)),
			}, nil
		},
	}

	spamSamples := strings.NewReader("win free iPhone\nlottery prize")

	filter := NewSpamFilter(SpamParams{
		SpamSamples:         spamSamples,
		SimilarityThreshold: 0.5,
		SuperUser:           superUser,
		MinMsgLen:           5,
		Dry:                 false,
		HTTPClient:          mockedHTTPClient,
	})
	tests := []struct {
		msg      Message
		expected Response
	}{
		{
			Message{From: User{ID: 1, Username: "john", DisplayName: "John"}, Text: "Hello, how are you?", ID: 1},
			Response{},
		},
		{
			Message{From: User{ID: 4, Username: "john", DisplayName: "John"}, Text: "Hello üòÅüê∂üçï how are you? ", ID: 4},
			Response{Text: "this is spam! go to ban, \"John\" (id:4)", Send: true,
				BanInterval: permanentBanDuration, ReplyTo: 4, DeleteReplyTo: true,
				User: User{ID: 4, Username: "john", DisplayName: "John"}},
		},
		{
			Message{From: User{ID: 2, Username: "spammer", DisplayName: "Spammer"}, Text: "Win a free iPhone now!", ID: 2},
			Response{Text: "this is spam! go to ban, \"Spammer\" (id:2)", Send: true,
				ReplyTo: 2, BanInterval: permanentBanDuration, DeleteReplyTo: true,
				User: User{ID: 2, Username: "spammer", DisplayName: "Spammer"},
			},
		},
		{
			Message{From: User{ID: 3, Username: "super", DisplayName: "SuperUser"}, Text: "Win a free iPhone now!", ID: 3},
			Response{},
		},
		{
			Message{From: User{ID: 101, Username: "spammer", DisplayName: "blah"}, Text: "something something", ID: 10},
			Response{Text: "this is spam! go to ban, \"blah\" (id:101)", Send: true,
				ReplyTo: 10, BanInterval: permanentBanDuration, DeleteReplyTo: true,
				User: User{ID: 101, Username: "spammer", DisplayName: "blah"},
			},
		},
		{
			Message{From: User{ID: 102, Username: "spammer", DisplayName: "blah"}, Text: "something –ø–∏—à–∏—Ç–µ –≤ –ª—Å something", ID: 10},
			Response{Text: "this is spam! go to ban, \"blah\" (id:102)", Send: true,
				ReplyTo: 10, BanInterval: permanentBanDuration, DeleteReplyTo: true,
				User: User{ID: 102, Username: "spammer", DisplayName: "blah"},
			},
		},
	}

	for _, test := range tests {
		t.Run(test.msg.From.Username, func(t *testing.T) {
			assert.Equal(t, test.expected, filter.OnMessage(test.msg))
		})
	}
}

func TestIsSpam(t *testing.T) {
	spamSamples := strings.NewReader("win free iPhone\nlottery prize")
	filter := NewSpamFilter(SpamParams{
		SpamSamples:         spamSamples,
		SimilarityThreshold: 0.5,
		SuperUser:           nil,
		MinMsgLen:           5,
		Dry:                 false,
	})

	tests := []struct {
		name      string
		message   string
		threshold float64
		expected  bool
	}{
		{"Not Spam", "Hello, how are you?", 0.5, false},
		{"Exact Match", "Win a free iPhone now!", 0.5, true},
		{"Similar Match", "You won a lottery prize!", 0.3, true},
		{"High Threshold", "You won a lottery prize!", 0.9, false},
		{"Partial Match", "win free", 0.9, false},
		{"Low Threshold", "win free", 0.8, true},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			filter.SimilarityThreshold = test.threshold // update threshold for each test case
			assert.Equal(t, test.expected, filter.isSpamSimilarity(test.message))
		})
	}
}

// nolint
func TestTooManyEmojis(t *testing.T) {
	tests := []struct {
		name  string
		input string
		count int
		spam  bool
	}{
		{"NoEmoji", "Hello, world!", 0, false},
		{"OneEmoji", "Hi there üëã", 1, false},
		{"TwoEmojis", "Good morning üåûüåª", 2, false},
		{"Mixed", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family emoji", 1, false},
		{"EmojiSequences", "üè≥Ô∏è‚Äçüåà Rainbow flag", 1, false},
		{"TextAfterEmoji", "üòä Have a nice day!", 1, false},
		{"OnlyEmojis", "üòÅüê∂üçï", 3, true},
		{"WithCyrillic", "–ü—Ä–∏–≤–µ—Ç üåû üçï –º–∏—Ä! üëã", 3, true},
	}

	spamSamples := strings.NewReader("win free iPhone\nlottery prize")
	filter := NewSpamFilter(SpamParams{
		SpamSamples:         spamSamples,
		SimilarityThreshold: 0.5,
		SuperUser:           nil,
		MinMsgLen:           5,
		Dry:                 false,
	})
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			isSpam, count := filter.tooManyEmojis(tt.input, 2)
			assert.Equal(t, tt.count, count)
			assert.Equal(t, tt.spam, isSpam)
		})
	}
}

func TestStopWords(t *testing.T) {
	filter := &SpamFilter{}

	tests := []struct {
		name     string
		message  string
		expected bool
	}{
		{
			name:     "Stop word present",
			message:  "Hello, please send me a message –≤ –ª–∏—á–∫—É.",
			expected: true,
		},
		{
			name:     "Stop word present with emoji",
			message:  "üëã–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç\n–ò—â—É –∞–º–±–∏—Ü–∏–æ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫ —Å–µ6–µ –≤ –∫–æ–º–∞–Ω–¥—É\n–ö—Ç–æ –≤ –ø–æ–∏—Å–∫–∞—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –Ω–æ–≤–æ–π  —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! üë®üèª\u200düíª\n–ü–∏—à–∏—Ç–µ –≤ –ª—Å‚úçÔ∏è",
			expected: true,
		},
		{
			name:     "Stop word present with emoji, 2",
			message:  "–ò—ây –ª—é–¥e–π –¥–ª—è co–≤–ºec—Ç–Ωo–≥o –∑a—Äa–±o—Ç–∫a –Ωa —Ü–∏—Ñ—Äo–≤—ãx a–∫—Ç–∏–≤ax. ü™ô\n–î–Ωe–≤–Ωa—è –¥oxo–¥–Ωoc—Ç—å coc—Ça–≤–ª—èe—Ç 3-6%.üí∏\n–†a–±o—Çae–º –≤ —É–¥a–ªe–Ω–Ωo–º —Ñop–ºa—Çe. üåê\n–ìo—Ço–≤ co—Çpy–¥–Ω–∏—áa—Ç—å c –Ωo–≤–∏—á–∫a–º–∏. ü§ù\n–ùe —Çpe–±ye—Ç—Å—è –≤–Ωece–Ω–∏e –øpe–¥–≤ap–∏—Çe–ª—å–Ω—ãx –ø–ªa—Çe–∂e–π, –øp–∏–Ω–∏–ºa—é –øpo—Üe–Ω—Ç c –øo–ªy—á–µ–Ω–Ωo–π –ø—Ä–∏–±—ã–ª–∏. üôåüí∞\n–óa–∏–Ω—Çepeco–≤a–ªo?\n–ü–∏—à–∏—Çe –≤ –ª–∏—á–Ω—ãe coo–±—âe–Ω–∏—è. üìù",
			expected: true,
		},
		{
			name:     "No stop word present",
			message:  "Hello, how are you?",
			expected: false,
		},
		{
			name:     "Case insensitive stop word present",
			message:  "Hello, please send me a message –í –õ–ò–ß–ö–£",
			expected: true,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			assert.Equal(t, test.expected, filter.stopWords(test.message))
		})
	}
}

func TestSpam_isCasSpam(t *testing.T) {

	tests := []struct {
		name           string
		mockResp       string
		mockStatusCode int
		expected       bool
	}{
		{
			name:           "User is not a spammer",
			mockResp:       `{"ok": false, "description": "Not a spammer"}`,
			mockStatusCode: 200,
			expected:       false,
		},
		{
			name:           "User is a spammer",
			mockResp:       `{"ok": true, "description": "Is a spammer"}`,
			mockStatusCode: 200,
			expected:       true,
		},
		{
			name:           "HTTP error",
			mockResp:       "",
			mockStatusCode: 500,
			expected:       false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockedHTTPClient := &mocks.HTTPClient{
				DoFunc: func(req *http.Request) (*http.Response, error) {
					return &http.Response{
						StatusCode: tt.mockStatusCode,
						Body:       io.NopCloser(bytes.NewBufferString(tt.mockResp)),
					}, nil
				},
			}

			s := NewSpamFilter(SpamParams{
				CasAPI:      "http://localhost",
				HTTPClient:  mockedHTTPClient,
				SpamSamples: strings.NewReader("win free iPhone\nlottery prize"),
			})

			msg := Message{
				From: User{
					ID:          1,
					Username:    "testuser",
					DisplayName: "Test User",
				},
				ID:   1,
				Text: "Hello",
			}

			isSpam := s.isCasSpam(msg.From.ID)
			assert.Equal(t, tt.expected, isSpam)
		})
	}
}

func TestSpam_OnMessageCheckOnce(t *testing.T) {
	mockedHTTPClient := &mocks.HTTPClient{
		DoFunc: func(req *http.Request) (*http.Response, error) {
			return &http.Response{
				StatusCode: 200,
				Body:       io.NopCloser(bytes.NewBufferString(`{"ok": false, "description": "Not a spammer"}`)),
			}, nil
		},
	}

	su := &mocks.SuperUser{IsSuperFunc: func(userName string) bool {
		if userName == "super" || userName == "admin" {
			return true
		}
		return false
	}}

	s := NewSpamFilter(SpamParams{
		CasAPI:              "http://localhost",
		HTTPClient:          mockedHTTPClient,
		SpamSamples:         strings.NewReader("win free iPhone\nlottery prize"),
		SuperUser:           su,
		SimilarityThreshold: 0.5,
	})
	res := s.OnMessage(Message{From: User{ID: 1, Username: "testuser"}, ID: 1, Text: "Hello"})
	assert.Equal(t, Response{}, res)
	assert.Len(t, mockedHTTPClient.DoCalls(), 1, "Do should be called once")

	res = s.OnMessage(Message{From: User{ID: 1, Username: "testuser"}, ID: 1, Text: "Hello"})
	assert.Equal(t, Response{}, res)
	assert.Len(t, mockedHTTPClient.DoCalls(), 1, "Do should not be called anymore")

	res = s.OnMessage(Message{From: User{ID: 2, Username: "testuser2"}, ID: 2, Text: "Hello"})
	assert.Equal(t, Response{}, res)
	assert.Len(t, mockedHTTPClient.DoCalls(), 2, "Do should be called once more")
}

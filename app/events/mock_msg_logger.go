// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package events

import (
	bot "github.com/radio-t/super-bot/app/bot"
	"sync"
)

// Ensure, that msgLoggerMock does implement msgLogger.
// If this is not the case, regenerate this file with moq.
var _ msgLogger = &msgLoggerMock{}

// msgLoggerMock is a mock implementation of msgLogger.
//
//	func TestSomethingThatUsesmsgLogger(t *testing.T) {
//
//		// make and configure a mocked msgLogger
//		mockedmsgLogger := &msgLoggerMock{
//			SaveFunc: func(msg *bot.Message)  {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedmsgLogger in code that requires msgLogger
//		// and then make assertions.
//
//	}
type msgLoggerMock struct {
	// SaveFunc mocks the Save method.
	SaveFunc func(msg *bot.Message)

	// calls tracks calls to the methods.
	calls struct {
		// Save holds details about calls to the Save method.
		Save []struct {
			// Msg is the msg argument value.
			Msg *bot.Message
		}
	}
	lockSave sync.RWMutex
}

// Save calls SaveFunc.
func (mock *msgLoggerMock) Save(msg *bot.Message) {
	if mock.SaveFunc == nil {
		panic("msgLoggerMock.SaveFunc: method is nil but msgLogger.Save was just called")
	}
	callInfo := struct {
		Msg *bot.Message
	}{
		Msg: msg,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	mock.SaveFunc(msg)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedmsgLogger.SaveCalls())
func (mock *msgLoggerMock) SaveCalls() []struct {
	Msg *bot.Message
} {
	var calls []struct {
		Msg *bot.Message
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

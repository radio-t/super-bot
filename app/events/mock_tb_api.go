// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package events

import (
	tbapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"sync"
)

// Ensure, that tbAPIMock does implement tbAPI.
// If this is not the case, regenerate this file with moq.
var _ tbAPI = &tbAPIMock{}

// tbAPIMock is a mock implementation of tbAPI.
//
//	func TestSomethingThatUsestbAPI(t *testing.T) {
//
//		// make and configure a mocked tbAPI
//		mockedtbAPI := &tbAPIMock{
//			GetChatFunc: func(config tbapi.ChatInfoConfig) (tbapi.Chat, error) {
//				panic("mock out the GetChat method")
//			},
//			GetUpdatesChanFunc: func(config tbapi.UpdateConfig) tbapi.UpdatesChannel {
//				panic("mock out the GetUpdatesChan method")
//			},
//			RequestFunc: func(c tbapi.Chattable) (*tbapi.APIResponse, error) {
//				panic("mock out the Request method")
//			},
//			SendFunc: func(c tbapi.Chattable) (tbapi.Message, error) {
//				panic("mock out the Send method")
//			},
//		}
//
//		// use mockedtbAPI in code that requires tbAPI
//		// and then make assertions.
//
//	}
type tbAPIMock struct {
	// GetChatFunc mocks the GetChat method.
	GetChatFunc func(config tbapi.ChatInfoConfig) (tbapi.Chat, error)

	// GetUpdatesChanFunc mocks the GetUpdatesChan method.
	GetUpdatesChanFunc func(config tbapi.UpdateConfig) tbapi.UpdatesChannel

	// RequestFunc mocks the Request method.
	RequestFunc func(c tbapi.Chattable) (*tbapi.APIResponse, error)

	// SendFunc mocks the Send method.
	SendFunc func(c tbapi.Chattable) (tbapi.Message, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetChat holds details about calls to the GetChat method.
		GetChat []struct {
			// Config is the config argument value.
			Config tbapi.ChatInfoConfig
		}
		// GetUpdatesChan holds details about calls to the GetUpdatesChan method.
		GetUpdatesChan []struct {
			// Config is the config argument value.
			Config tbapi.UpdateConfig
		}
		// Request holds details about calls to the Request method.
		Request []struct {
			// C is the c argument value.
			C tbapi.Chattable
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// C is the c argument value.
			C tbapi.Chattable
		}
	}
	lockGetChat        sync.RWMutex
	lockGetUpdatesChan sync.RWMutex
	lockRequest        sync.RWMutex
	lockSend           sync.RWMutex
}

// GetChat calls GetChatFunc.
func (mock *tbAPIMock) GetChat(config tbapi.ChatInfoConfig) (tbapi.Chat, error) {
	if mock.GetChatFunc == nil {
		panic("tbAPIMock.GetChatFunc: method is nil but tbAPI.GetChat was just called")
	}
	callInfo := struct {
		Config tbapi.ChatInfoConfig
	}{
		Config: config,
	}
	mock.lockGetChat.Lock()
	mock.calls.GetChat = append(mock.calls.GetChat, callInfo)
	mock.lockGetChat.Unlock()
	return mock.GetChatFunc(config)
}

// GetChatCalls gets all the calls that were made to GetChat.
// Check the length with:
//
//	len(mockedtbAPI.GetChatCalls())
func (mock *tbAPIMock) GetChatCalls() []struct {
	Config tbapi.ChatInfoConfig
} {
	var calls []struct {
		Config tbapi.ChatInfoConfig
	}
	mock.lockGetChat.RLock()
	calls = mock.calls.GetChat
	mock.lockGetChat.RUnlock()
	return calls
}

// GetUpdatesChan calls GetUpdatesChanFunc.
func (mock *tbAPIMock) GetUpdatesChan(config tbapi.UpdateConfig) tbapi.UpdatesChannel {
	if mock.GetUpdatesChanFunc == nil {
		panic("tbAPIMock.GetUpdatesChanFunc: method is nil but tbAPI.GetUpdatesChan was just called")
	}
	callInfo := struct {
		Config tbapi.UpdateConfig
	}{
		Config: config,
	}
	mock.lockGetUpdatesChan.Lock()
	mock.calls.GetUpdatesChan = append(mock.calls.GetUpdatesChan, callInfo)
	mock.lockGetUpdatesChan.Unlock()
	return mock.GetUpdatesChanFunc(config)
}

// GetUpdatesChanCalls gets all the calls that were made to GetUpdatesChan.
// Check the length with:
//
//	len(mockedtbAPI.GetUpdatesChanCalls())
func (mock *tbAPIMock) GetUpdatesChanCalls() []struct {
	Config tbapi.UpdateConfig
} {
	var calls []struct {
		Config tbapi.UpdateConfig
	}
	mock.lockGetUpdatesChan.RLock()
	calls = mock.calls.GetUpdatesChan
	mock.lockGetUpdatesChan.RUnlock()
	return calls
}

// Request calls RequestFunc.
func (mock *tbAPIMock) Request(c tbapi.Chattable) (*tbapi.APIResponse, error) {
	if mock.RequestFunc == nil {
		panic("tbAPIMock.RequestFunc: method is nil but tbAPI.Request was just called")
	}
	callInfo := struct {
		C tbapi.Chattable
	}{
		C: c,
	}
	mock.lockRequest.Lock()
	mock.calls.Request = append(mock.calls.Request, callInfo)
	mock.lockRequest.Unlock()
	return mock.RequestFunc(c)
}

// RequestCalls gets all the calls that were made to Request.
// Check the length with:
//
//	len(mockedtbAPI.RequestCalls())
func (mock *tbAPIMock) RequestCalls() []struct {
	C tbapi.Chattable
} {
	var calls []struct {
		C tbapi.Chattable
	}
	mock.lockRequest.RLock()
	calls = mock.calls.Request
	mock.lockRequest.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *tbAPIMock) Send(c tbapi.Chattable) (tbapi.Message, error) {
	if mock.SendFunc == nil {
		panic("tbAPIMock.SendFunc: method is nil but tbAPI.Send was just called")
	}
	callInfo := struct {
		C tbapi.Chattable
	}{
		C: c,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(c)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedtbAPI.SendCalls())
func (mock *tbAPIMock) SendCalls() []struct {
	C tbapi.Chattable
} {
	var calls []struct {
		C tbapi.Chattable
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
